
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AdminRole {
  SUPER_ADMIN
  EDITOR
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ServiceRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  hashedPassword String? // Optional if using OAuth exclusively for some users, but required for Credentials
  name          String?
  role          AdminRole @default(EDITOR) // Custom role for admin users
  image         String?   // Required by NextAuth for user image
  emailVerified DateTime? // Required by NextAuth for email verification tracking

  accounts      Account[] // For OAuth providers
  sessions      Session[] // For session management

  // WilayaConnect specific relations
  announcements             Announcement[]            @relation("AnnouncementAuthor")
  events                    Event[]                   @relation("EventAuthor")
  decisions                 Decision[]                @relation("DecisionAuthor")
  communicationLogs         CommunicationLog[]        @relation("CommunicationLogSender")
  assignedServiceRequests   ServiceRequest[]          @relation("AssignedServiceRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Required by NextAuth Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Required by NextAuth Prisma Adapter
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Required by NextAuth Prisma Adapter
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Announcement {
  id          String        @id @default(cuid())
  title       String
  content     String        @db.Text
  summaryAI   String?       @db.Text
  categories  String[]      // Changed from category String? to String[]
  tagsAI      String[]?
  status      ContentStatus @default(DRAFT)
  imageUrl    String?       // Renamed from imageUrlAI
  publishedAt DateTime?

  authorId String
  author   User   @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  eventDate   DateTime
  location    String
  status      ContentStatus @default(DRAFT)
  imageUrl    String?
  publishedAt DateTime?

  authorId String
  author   User   @relation("EventAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Decision {
  id              String        @id @default(cuid())
  title           String
  content         String        @db.Text
  summary         String?       @db.Text // Renamed from summaryAI
  categories      String[]?
  tags            String[]?     // Renamed from tagsAI
  status          ContentStatus @default(DRAFT)
  decisionDate    DateTime
  referenceNumber String?
  attachmentUrl   String?
  publishedAt     DateTime?

  authorId String
  author   User   @relation("DecisionAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Citizen {
  id              String    @id @default(cuid())
  phoneNumber     String    @unique
  name            String?
  address         String?
  otp             String?
  otpExpiresAt    DateTime?
  isVerified      Boolean   @default(false)

  serviceRequests ServiceRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceRequest {
  id              String    @id @default(cuid())
  requestType     String
  description     String    @db.Text
  attachments     String[]  // URLs to attachments - Changed from Json?
  status          ServiceRequestStatus @default(PENDING)
  resolutionNotes String?   @db.Text
  adminNotes      String?   @db.Text
  historyLog      Json?     // Array of ServiceRequestHistoryEntry

  citizenId String
  citizen   Citizen @relation(fields: [citizenId], references: [id], onDelete: Cascade)

  assignedAdminId String?
  assignedAdmin   User?     @relation("AssignedServiceRequests", fields: [assignedAdminId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([citizenId])
  @@index([assignedAdminId])
  @@index([status])
  @@index([requestType])
}

model CommunicationLog {
  id                       String   @id @default(cuid())
  messageContent           String   @db.Text
  channels                 Json     // Example: { sms: true, push: false, whatsapp: true }
  targetAudienceCategories Json     // Example: ["Urbanisme", "Sant√©"]
  status                   String   // Example: DRAFT, SCHEDULED, SENT, FAILED
  scheduledAt              DateTime?
  sentAt                   DateTime?
  
  createdByAdminId String?
  createdByAdmin   User?     @relation("CommunicationLogSender", fields: [createdByAdminId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdByAdminId])
}
