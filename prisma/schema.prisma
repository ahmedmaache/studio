datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String? // Kept for credentials auth
  role          AdminRole @default(EDITOR) // Custom role for admin
  accounts      Account[]
  sessions      Session[]

  // Relations specific to AdminUser functionality
  announcements           Announcement[]           @relation("AnnouncementAuthor")
  events                  Event[]                  @relation("EventAuthor")
  decisions               Decision[]               @relation("DecisionAuthor")
  communicationLogs       CommunicationLog[]       @relation("CommunicationLogAdmin")
  assignedServiceRequests ServiceRequest[]         @relation("ServiceRequestAssignee")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AdminRole {
  SUPER_ADMIN
  EDITOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Announcement {
  id           String        @id @default(cuid())
  title        String
  content      String        @db.Text
  summary      String?       @db.Text
  categories   String[]      @default([]) // Changed from category String?
  tags         String[]      @default([]) // Renamed from tagsAI
  status       ContentStatus @default(DRAFT)
  imageUrl     String?       // Renamed from imageUrlAI
  publishedAt  DateTime?
  authorId     String
  author       User          @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  eventDate   DateTime
  location    String
  status      ContentStatus @default(DRAFT)
  imageUrl    String?
  publishedAt DateTime?
  authorId    String
  author      User          @relation("EventAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Decision {
  id              String        @id @default(cuid())
  title           String
  content         String        @db.Text
  summary         String?       @db.Text
  categories      String[]      @default([])
  tags            String[]      @default([]) // Renamed from tagsAI
  status          ContentStatus @default(DRAFT)
  decisionDate    DateTime
  referenceNumber String?
  attachmentUrl   String?
  publishedAt     DateTime?
  authorId        String
  author          User          @relation("DecisionAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Citizen {
  id            String    @id @default(cuid())
  phoneNumber   String    @unique
  name          String?
  address       String?
  otp           String?
  otpExpiresAt  DateTime?
  isVerified    Boolean   @default(false)
  pushTokens    String[]  @default([]) // For FCM device tokens
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  serviceRequests          ServiceRequest[]
  notificationSubscriptions NotificationSubscription[] @relation("CitizenSubscriptions")
}

model ServiceRequest {
  id                String                 @id @default(cuid())
  requestType       String
  description       String                 @db.Text
  attachments       String[]               @default([]) // Changed from Json? to String[]
  status            ServiceRequestStatus @default(PENDING)
  resolutionNotes   String?                @db.Text
  adminNotes        String?                @db.Text
  historyLog        Json                   @default("[]") // Keep as Json, store ServiceRequestHistoryEntry[]
  citizenId         String
  citizen           Citizen                @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  assignedAdminId   String?
  assignedAdmin     User?                  @relation("ServiceRequestAssignee", fields: [assignedAdminId], references: [id], onDelete:SetNull)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

enum ServiceRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

model CommunicationLog {
  id                       String                 @id @default(cuid())
  messageContent           String                 @db.Text
  channels                 Json // Store an object like { sms: boolean, push: boolean, whatsapp: boolean }
  targetAudienceCategories String[] // Store array of category names/IDs
  targetCitizenIds         String[] @default([]) // IDs of citizens actually targeted
  status                   CommunicationStatus @default(PENDING)
  scheduledAt              DateTime?
  sentAt                   DateTime?
  failureReason            String?
  fcmMessageIds            String[]  @default([])
  fcmSuccessCount          Int?
  fcmFailureCount          Int?
  adminId                  String
  admin                    User                   @relation("CommunicationLogAdmin", fields: [adminId], references: [id], onDelete:SetNull) // SetNull if admin is deleted
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
}

enum CommunicationStatus {
  PENDING
  SENT
  PARTIALLY_FAILED
  FAILED
  DRAFT
  SCHEDULED
}

model NotificationSubscription {
  id           String  @id @default(cuid())
  citizenId    String
  categoryName String  // e.g., "Urbanisme", "Sant√© Publique"
  isActive     Boolean @default(true)
  citizen      Citizen @relation("CitizenSubscriptions", fields: [citizenId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([citizenId, categoryName]) // Ensure a citizen subscribes to a category only once
}
